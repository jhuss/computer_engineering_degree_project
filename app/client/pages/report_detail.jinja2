{% extends "layouts/base.jinja2" %}

{% block title %}Reports{% endblock %}

{% macro paginator(pagination, current_page) %}
<nav class="pagination" role="navigation" aria-label="pagination">
    <ul class="pagination-list">
        {% for page in pagination %}
            <li>
                <a class="pagination-link{% if current_page == page.number %} is-current{% endif %}" aria-label="Goto page {{ page.number }}" href="{{ page.url }}">{{ page.number }}</a>
            </li>
        {% endfor %}
    </ul>
</nav>
{% endmacro %}

{% block content %}
<section id="report-details" class="section">
    <div class="container">
        <h1 class="title">
            {{ context.title }}
        </h1>

        {{ paginator(context.data.pagination, context.data.current_page) }}

        <div class="content">
        {% for item in context.data.images %}
        <div class="preview">
            <div class="card">
                <div class="card-image">
                    <figure class="image" style="margin: 0;">
                        <canvas id="{{ item.image_file }}"></canvas>
                        <figcaption>
                            {{ item.datetime }}
                        </figcaption>
                    </figure>
                </div>
            </div>
        </div>
        {% endfor %}
        </div>

        {{ paginator(context.data.pagination, context.data.current_page) }}
    </div>
</section>
{% endblock %}

{% block js %}
<script type="text/javascript">
    function drawCapture(elementId, imageUrl, boxes, recognitions) {
        let img = new Image;
        img.src = imageUrl;
        img.onload = () => {
            let canvas = document.getElementById(elementId);
            let context = canvas.getContext('2d');
            canvas.width = img.width;
            canvas.height = img.height;
            context.drawImage(img, 0, 0);
            drawBox(context, boxes);
            drawRecognition(context, recognitions);
        }
    }

    function drawBox(context, boxes) {
        context.beginPath();
        context.lineWidth = 1;
        context.strokeStyle = 'red';
        boxes.forEach(box => {
            context.rect(box[0], box[1], box[2], box[3]);
        });
        context.stroke();
        context.save();
    }

    function drawRecognition(context, recognitions) {
        recognitions.forEach(recognition => {
            let fill_color = (recognition['recognized'] === 'true') ? 'green' : 'red';
            let font = 'bold 12px serif';

            context.beginPath();
            context.lineWidth = 1;
            context.strokeStyle = fill_color;
            let face_box = recognition['face_box'];
            context.rect(face_box[0], face_box[1], face_box[2], face_box[3]);
            context.stroke();

            // label
            context.save();
            context.font = font;
            context.textBaseline = 'top';
            let name = recognition['name'];
            let width = context.measureText(name).width;
            let x = face_box[0];
            let y = face_box[1] + face_box[3];
            context.fillStyle = fill_color;
            context.fillRect(x, y, width, parseInt(font, 12));
            context.fillStyle = '#fff';
            context.fillText(name, x, y);
            context.restore();
        });
    }

    // document ready
    document.addEventListener("DOMContentLoaded", event => {
    {% for item in context.data.images %}
        drawCapture(
        '{{ item.image_file }}',
        '{{ "/reports/captured_image/" }}?folder={{ context.data.group }}&image={{ item.image_file }}',
        {{ item.analysis_box }},
        {{ item.recognitions }}
        );
    {% endfor %}
    });
</script>
{% endblock %}
